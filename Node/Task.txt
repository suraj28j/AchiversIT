Date: 27/08/2024
Question 1 : What is difference between fs.writeFile and fs.writeFileSync
Answer :     writeFile and writeFileSync. Both functions take a file path and data as arguments, and write the data to the specified file.
             [difference between the two functions:] 
             writeFile is asynchronous, while writeFileSync is synchronous This means that writeFile will return immediately,before the file has been written and only its callback will be called when the write operation is completed.
             while writeFileSync will block until the file has been written

Question 2:  Creat own file with our details
             const fs = require('fs');
             fs.writeFileSync('suraj.txt','Name : Suraj , Age : 33 , Qualification : Diploma')


Date: 28/08/2024 
Question 1 : What is difference between process.exit() and process.exitCode 
Answer :     process.exit() will exit as quickly as possible (after all 'exit' event listeners are called), even if there are pending async operations, including I/O operations.
             exitCode let the process exit gracefully when all operations have completed.
Question 2: respone html
            const http = require('http');
            function requestListnerCb(req,res){
            console.log("Server is runing");
            res.setHeader("Content-Type","text/html");
            res.write("<html>")
            res.write("<head><title>My Profile</title></head>")
            res.write("<h1>Hello ! my name is Suraj</h1>");
            res.write("<p>Learning Node JS</p>")
            res.write("<input type='text'><br>")
            res.write("<button>Submit</botton>")
            res.write("</html>")
            res.end();
            }
            const server = http.createServer(requestListnerCb);
            server.listen(3000)


Date: 29/08/2024 
Question 1 :  write data on system and that file data render on screen
Code : => 
const http = require('http');
const fs = require('fs');
const server = http.createServer((req, res) => {
    const bodyData = [];
    const userdata = [];
    if (req.url === '/') {
        res.write("<html>")
        res.write("<head><title>Node JS</title></head>")
        res.write("<body>")
        res.write("<form action = '/message' method = 'POST'>")
        res.write("<input type='text' name = 'usenname' placeholder = 'Enter Your Name'><br><br>")
        res.write("<input type='text' name = 'useremail' placeholder = 'Enter Your Email'><br><br>")
        res.write("<input type='text' name = 'city' placeholder = 'Enter Your City'><br><br>")
        res.write("<button type='submit'>Submit</button>")
        res.write("</form>")
        res.write("</body>")
        res.write("</html>")
        return res.end();
    }
    if (req.url === '/message' && req.method === 'POST') {
        req.on('data', (chunk) => {
            // console.log(chunk);
            bodyData.push(chunk);
            // console.log(bodyData);
        })
        req.on('end', () => {
            const parseData = Buffer.concat(bodyData).toString()
            // console.log(parseData);
            const username = parseData.split('&')[0]
            const useremail = parseData.split('&')[1]
            const usercity = parseData.split('&')[2]
            userdata.push(username,useremail,usercity)
            fs.writeFileSync('aboutme.txt',userdata.toString())
        })
        res.statusCode = 302;
        res.setHeader('Location','/user')
        return res.end()
    }
   if(req.url === '/user'){
    const file_data = fs.readFileSync('aboutme.txt');
    const fileData = file_data.toString();
    const userName = fileData.split(',')[0].split('=')[1]
    const userEmail = fileData.split(',')[1].split('=')[1]
    const userCity = fileData.split(',')[2].split('=')[1]

    res.setHeader('Location', '/user')
    res.write("<head><title>User</title></head>")
    res.write("<body>")
    res.write(`<h2>Name : ${userName}</h2>`)
    res.write(`<h2>Email : ${userEmail}</h2>`)
    res.write(`<h2>City : ${userCity}</h2>`)
    res.write("</body>")
    res.write("</html>")
    return res.end();
   }
})
server.listen(3000)