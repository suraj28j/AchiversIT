Date: 27/08/2024
Question 1 : What is difference between fs.writeFile and fs.writeFileSync
Answer :     writeFile and writeFileSync. Both functions take a file path and data as arguments, and write the data to the specified file.
             [difference between the two functions:] 
             writeFile is asynchronous, while writeFileSync is synchronous This means that writeFile will return immediately,before the file has been written and only its callback will be called when the write operation is completed.
             while writeFileSync will block until the file has been written

Question 2:  Creat own file with our details
             const fs = require('fs');
             fs.writeFileSync('suraj.txt','Name : Suraj , Age : 33 , Qualification : Diploma')


Date: 28/08/2024 
Question 1 : What is difference between process.exit() and process.exitCode 
Answer :     process.exit() will exit as quickly as possible (after all 'exit' event listeners are called), even if there are pending async operations, including I/O operations.
             exitCode let the process exit gracefully when all operations have completed.
Question 2: respone html
            const http = require('http');
            function requestListnerCb(req,res){
            console.log("Server is runing");
            res.setHeader("Content-Type","text/html");
            res.write("<html>")
            res.write("<head><title>My Profile</title></head>")
            res.write("<h1>Hello ! my name is Suraj</h1>");
            res.write("<p>Learning Node JS</p>")
            res.write("<input type='text'><br>")
            res.write("<button>Submit</botton>")
            res.write("</html>")
            res.end();
            }
            const server = http.createServer(requestListnerCb);
            server.listen(3000)


Date: 29/08/2024 
Question 1 :  write data on system and that file data render on screen
Code : => 
const http = require('http');
const fs = require('fs');
const server = http.createServer((req, res) => {
    const bodyData = [];
    const userdata = [];
    if (req.url === '/') {
        res.write("<html>")
        res.write("<head><title>Node JS</title></head>")
        res.write("<body>")
        res.write("<form action = '/message' method = 'POST'>")
        res.write("<input type='text' name = 'usenname' placeholder = 'Enter Your Name'><br><br>")
        res.write("<input type='text' name = 'useremail' placeholder = 'Enter Your Email'><br><br>")
        res.write("<input type='text' name = 'city' placeholder = 'Enter Your City'><br><br>")
        res.write("<button type='submit'>Submit</button>")
        res.write("</form>")
        res.write("</body>")
        res.write("</html>")
        return res.end();
    }
    if (req.url === '/message' && req.method === 'POST') {
        req.on('data', (chunk) => {
            // console.log(chunk);
            bodyData.push(chunk);
            // console.log(bodyData);
        })
        req.on('end', () => {
            const parseData = Buffer.concat(bodyData).toString()
            // console.log(parseData);
            const username = parseData.split('&')[0]
            const useremail = parseData.split('&')[1]
            const usercity = parseData.split('&')[2]
            userdata.push(username,useremail,usercity)
            fs.writeFileSync('aboutme.txt',userdata.toString())
        })
        res.statusCode = 302;
        res.setHeader('Location','/user')
        return res.end()
    }
   if(req.url === '/user'){
    const file_data = fs.readFileSync('aboutme.txt');
    const fileData = file_data.toString();
    const userName = fileData.split(',')[0].split('=')[1]
    const userEmail = fileData.split(',')[1].split('=')[1]
    const userCity = fileData.split(',')[2].split('=')[1]

    res.setHeader('Location', '/user')
    res.write("<head><title>User</title></head>")
    res.write("<body>")
    res.write(`<h2>Name : ${userName}</h2>`)
    res.write(`<h2>Email : ${userEmail}</h2>`)
    res.write(`<h2>City : ${userCity}</h2>`)
    res.write("</body>")
    res.write("</html>")
    return res.end();
   }
})
server.listen(3000)


Date: 02/09/2024 
Question 1 :  module not found in react, which type of error
Answer : "module not found error" is an incorrect import path. (it is runtime error)


Date: 03/09/2024 
Question 1 : Why are we using Express JS ? Any reasons?
Answer : It’s effectively a tool that simplifies building web applications and APIs using JavaScript on the server side. 
         Express.js offers a robust set of features that enhance our productivity and streamline our web application. 
         It makes it easier to organize our application’s functionality with middleware and routing.
         It adds helpful utilities to Node HTTP objects and facilitates the rendering of dynamic HTTP objects

Question 2 : What are middlewares ?
Answer : Middleware are the just plain JavaScript function so this function are going to take a parameter as a callbacks so inside that call backs we are going to use a methods request response and next.

Question 3 : What is next used for ?
Answer : Next() is a middleware function that calls for the control of another middleware once the code is completed.
         we can wait till the network operations are completed before you go to the next step
        
Question 4 : What is res.send used for?
Answer : The res.send function is used to send a response in form of various types of data, such as strings, objects, arrays, or buffers, and automatically sets the appropriate Content-Type header based on the data type.

Question 5 : If i do res.send('<h1> hello to node js </h1>') . What will be the content-type header equal to.
Answer :    text/html

Question 6 : If I do res.send( { key1: value }) . What will be the content-type header equal to.
Answer :    application/json

Question 7 : What does app.listen(3000) do behind the scenes ?
Answer :    var http = require('http'); // require http
            app.listen = function listen() {
            var server = http.createServer(this);
            return server.listen.apply(server, arguments);
            };


Date: 04/09/2024 
Question 1 :  What is the body parser used for ?
Answer : body parser is middleware. It processes incoming request bodies, making it easier to handle POST and PUT requests

Question 2 :  Now add one more input tag in the add product page so that user can input size of the product.
Code => :   app.use ( "/add-product", (req,res,next) => {
            res.send(`
            <form action = '/product' method = 'POST'>
            <input type = 'text' name = 'title' placeholder ='product title'>
            <input type = 'text' name = 'price' placeholder ='product price'>
            <input type = 'text' name = 'size' placeholder ='product size'>
            <button type = 'submit'>Submit</button>
            </form>
            `)
            });
output => : { title: 'shirt', price: '400', size: 'xl' } 

Question 3 :  When the user clicks on submit parse both the input tags and show it in console
output :      { title: 'shirt', price: '400'}

Question 4 :  What is the difference between app.use and app.post/get?
Answer :      app.get --> It is only for handling GET HTTP requests. 
              app.post --> It is only for handling POST HTTP requests.
              app.use --> It is generally used for introducing middlewares in your application and can handle all type of HTTP requests.

Question 5 :  What is the use of extended attribute in body parser?
Answer : It is going to read all the rich user object and array.